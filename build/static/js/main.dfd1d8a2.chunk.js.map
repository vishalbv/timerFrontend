{"version":3,"sources":["components/mybody.js","App.js","serviceWorker.js","index.js"],"names":["MyBody","props","Address","getData","fetch","then","res","json","result","setState","timers","console","log","state","addTimer","timer","name","time","startTime","status","options","method","headers","body","JSON","stringify","_id","displayTime","resetTimer","data","i","length","timerStatusChange","val","st","undefined","Date","getTime","filter","v","k","value","this","setInterval","refreshData","interval","setHours","getHours","parseInt","left","hours","Math","floor","minutes","seconds","getDisplayTime","Component","AddTimer","handleChange","event","target","handleSubmit","preventDefault","type","onChange","onClick","Timers","Timer","className","handleEvent","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dfd1d8a2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./mybody.css\";\r\nclass MyBody extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { value: \"\", timers: [] };\r\n  }\r\n\r\n  Address = \"https://mybackcodetimer.herokuapp.com/\";\r\n  getData = () => {\r\n    fetch(this.Address + \"/getData\")\r\n      .then((res) => res.json())\r\n      .then((result) => {\r\n        this.setState({ timers: result });\r\n        console.log(this.state);\r\n      });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getData();\r\n    let y = setInterval(() => {\r\n      this.refreshData(this.state.timers);\r\n    }, 1000);\r\n  }\r\n  getDisplayTime(st, interval) {\r\n    let startTime = new Date(st);\r\n    startTime.setHours(startTime.getHours() + parseInt(interval));\r\n    const endTime = startTime.getTime();\r\n    // Update the count down every 1 second\r\n\r\n    // Get today's date and time\r\n    const now = new Date().getTime();\r\n\r\n    const left = endTime - now;\r\n    // Time calculations for hours, minutes and seconds\r\n    const hours = Math.floor((left % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\r\n    const minutes = Math.floor((left % (1000 * 60 * 60)) / (1000 * 60));\r\n    const seconds = Math.floor((left % (1000 * 60)) / 1000);\r\n    let status = \"S\";\r\n    // var p = ((minutes + seconds / 100) / 60) * 100;\r\n    // Output the result in an element with id=\"timer\"\r\n    const displayTime =\r\n      hours < 0 ? \"expired\" : hours + \"h\" + minutes + \"m\" + seconds + \"s\";\r\n    // If the count down is over, print expired\r\n    if (left < 0) {\r\n      status = \"E\";\r\n    }\r\n\r\n    return { displayTime, status };\r\n  }\r\n\r\n  refreshData(data) {\r\n    for (let i = 0; i < data.length; i++) {\r\n      if (data[i].status === \"S\") {\r\n        data[i] = {\r\n          ...data[i],\r\n          ...this.getDisplayTime(data[i].startTime, data[i].time),\r\n        };\r\n      }\r\n    }\r\n    this.setState({ timers: data });\r\n  }\r\n\r\n  addTimer = ({ name, time }) => {\r\n    // this.getDisplayTime()\r\n\r\n    //   startTime.setHours(startTime.getHours() + time);\r\n\r\n    //FOR 3 HRS\r\n\r\n    const timer = {\r\n      name,\r\n      time,\r\n      startTime: 0,\r\n      status: \"A\",\r\n    };\r\n    const options = {\r\n      method: \"POST\",\r\n      // or 'PUT'\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(timer),\r\n    };\r\n\r\n    fetch(this.Address + \"/addTimer\", options)\r\n      .then((res) => res.json())\r\n      .then((result) => {\r\n        this.setState({\r\n          timers: [\r\n            ...this.state.timers,\r\n            { ...timer, _id: result._id, displayTime: \"Newly Added\" },\r\n          ],\r\n        });\r\n      });\r\n    //this.addData(timer);\r\n\r\n    // console.log(this.state.timers);\r\n  };\r\n  resetTimer = (timer) => {\r\n    // const ref = this.state.timers.filter((val, key) => val.name === timer.name);\r\n    let data = this.state.timers;\r\n    for (let i = 0; i < data.length; i++) {\r\n      if (data[i].name === timer.name) {\r\n        data[i].status = 0;\r\n        data[i].displayTime = 0;\r\n      }\r\n    }\r\n    this.setState({ timers: data });\r\n  };\r\n\r\n  timerStatusChange = ({ val, st }) => {\r\n    let startTime = undefined;\r\n    let status = undefined;\r\n    let displayTime = undefined;\r\n    if (st === \"S\") {\r\n      startTime = new Date().getTime();\r\n      status = \"S\";\r\n      displayTime = val.displayTime;\r\n    } else if (st === \"R\") {\r\n      startTime = 0;\r\n      status = \"R\";\r\n      displayTime = 0;\r\n    } else if (st === \"D\") {\r\n      startTime = val.startTime;\r\n      status = \"D\";\r\n    } else if (st === \"E\") {\r\n      startTime = val.startTime;\r\n      status = \"E\";\r\n      displayTime = \"EXPIRED\";\r\n    }\r\n\r\n    const timer = { ...val, startTime, status, displayTime };\r\n    const options = {\r\n      method: \"POST\",\r\n      // or 'PUT'\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(timer),\r\n    };\r\n\r\n    fetch(this.Address + \"/updateTimer\", options)\r\n      .then((res) => res.json())\r\n      .then((result) => {\r\n        if (st === \"D\") {\r\n          let data = this.state.timers.filter((v, k) => v._id !== val._id);\r\n          this.setState({ timers: data });\r\n        } else {\r\n          let data = this.state.timers;\r\n          for (let i = 0; i < data.length; i++) {\r\n            if (data[i]._id === val._id) {\r\n              data[i] = { ...data[i], startTime, status, displayTime };\r\n            }\r\n          }\r\n          this.setState({ timers: data });\r\n        }\r\n      });\r\n\r\n    // startrd\r\n    // deleted\r\n    // expired\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>BOSS TIMERS</h1>\r\n        <AddTimer addTimer={this.addTimer} />\r\n        <Timers\r\n          timers={this.state.timers}\r\n          timerStatusChange={this.timerStatusChange}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nclass AddTimer extends Component {\r\n  timer = {};\r\n\r\n  handleChange = (event) => {\r\n    const target = event.target;\r\n    if (target.name === \"name\") {\r\n      this.timer.name = target.value;\r\n    } else if (target.name === \"time\") {\r\n      this.timer.time = target.value;\r\n    }\r\n  };\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    this.props.addTimer(this.timer);\r\n  };\r\n  render() {\r\n    return (\r\n      <form>\r\n        <label>\r\n          Name:\r\n          <input type=\"text\" name=\"name\" onChange={this.handleChange} />\r\n        </label>\r\n        <label>\r\n          time:\r\n          <input type=\"text\" name=\"time\" onChange={this.handleChange} />\r\n        </label>\r\n        <input type=\"submit\" value=\"Submit\" onClick={this.handleSubmit} />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nclass Timers extends Component {\r\n  timer = {};\r\n\r\n  handleEvent(val, st) {\r\n    this.props.timerStatusChange({ val, st });\r\n  }\r\n\r\n  render() {\r\n    const Timer = (props) => (\r\n      <span className=\"timerBlock\">\r\n        <h1>{props.timer.name}</h1>\r\n        <h2>{props.timer.displayTime}</h2>\r\n        <button onClick={() => this.handleEvent(props.timer, \"R\")}>\r\n          Reset\r\n        </button>\r\n        <button onClick={() => this.handleEvent(props.timer, \"S\")}>\r\n          start\r\n        </button>\r\n        <button onClick={() => this.handleEvent(props.timer, \"D\")}>\r\n          Delete\r\n        </button>\r\n      </span>\r\n    );\r\n    return (\r\n      <div className=\"timers\">\r\n        {this.props.timers.map((timer, key) => (\r\n          <Timer key={key} timer={timer} />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MyBody;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport MyBody from \"./components/mybody\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <MyBody />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}