{"version":3,"sources":["components/mybody.js","App.js","serviceWorker.js","index.js"],"names":["AddTimer","Component","timer","handleChange","event","target","name","value","time","handleSubmit","preventDefault","props","addTimer","type","onChange","this","onClick","Timers","Timer","displayTime","timers","map","key","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4OAyGMA,GAvGeC,Y,4MAwGnBC,MAAQ,G,EAERC,aAAe,SAACC,GACd,IAAMC,EAASD,EAAMC,OACD,SAAhBA,EAAOC,KACT,EAAKJ,MAAMI,KAAOD,EAAOE,MACA,SAAhBF,EAAOC,OAChB,EAAKJ,MAAMM,KAAOH,EAAOE,Q,EAI7BE,aAAe,SAACL,GACdA,EAAMM,iBACN,EAAKC,MAAMC,SAAS,EAAKV,Q,uDAGzB,OACE,8BACE,uCAEE,2BAAOW,KAAK,OAAOP,KAAK,OAAOQ,SAAUC,KAAKZ,gBAEhD,uCAEE,2BAAOU,KAAK,OAAOP,KAAK,OAAOQ,SAAUC,KAAKZ,gBAEhD,2BAAOU,KAAK,SAASN,MAAM,SAASS,QAASD,KAAKN,oB,GA3BnCR,cAiCjBgB,E,4MACJf,MAAQ,G,EAERC,aAAe,SAACC,GACd,IAAMC,EAASD,EAAMC,OACD,SAAhBA,EAAOC,KACT,EAAKJ,MAAMI,KAAOD,EAAOE,MACA,SAAhBF,EAAOC,OAChB,EAAKJ,MAAMM,KAAOH,EAAOE,Q,EAI7BE,aAAe,SAACL,GACdA,EAAMM,iBACN,EAAKC,MAAMC,SAAS,EAAKV,Q,uDAIzB,IAAMgB,EAAQ,SAACP,GAAD,OACZ,6BACGA,EAAMT,MAAMI,KADf,OACyBK,EAAMT,MAAMiB,cAGvC,OACE,6BACGJ,KAAKJ,MAAMS,OAAOC,KAAI,SAACnB,EAAOoB,GAAR,OACrB,kBAACJ,EAAD,CAAOI,IAAKA,EAAKpB,MAAOA,Y,GA1BbD,aClINsB,MAJf,WACE,OAAO,yBAAKC,UAAU,OAAf,YCOWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c6423cd4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass MyBody extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { value: \"\", timers: [] };\r\n  }\r\n\r\n  Address = \"http://localhost:3000\";\r\n  getData = () => {\r\n    fetch(this.Address + \"/getData\")\r\n      .then((res) => res.json())\r\n      .then((result) => {\r\n        this.setState({ timers: result });\r\n        console.log(this.state);\r\n      });\r\n  };\r\n\r\n  addData(data) {\r\n    const options = {\r\n      method: \"POST\",\r\n      // or 'PUT'\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(data),\r\n    };\r\n\r\n    fetch(this.Address + \"/addTimer\", options)\r\n      .then((res) => res.json())\r\n      .then((result) => console.log(result));\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getData();\r\n  }\r\n  getDisplayTime(st, interval) {\r\n    let startTime = new Date(st);\r\n    startTime.setHours(startTime.getHours() + parseInt(interval));\r\n    const endTime = startTime.getTime();\r\n    // Update the count down every 1 second\r\n\r\n    // Get today's date and time\r\n    const now = new Date().getTime();\r\n\r\n    const left = endTime - now;\r\n    // Time calculations for hours, minutes and seconds\r\n    const hours = Math.floor((left % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\r\n    const minutes = Math.floor((left % (1000 * 60 * 60)) / (1000 * 60));\r\n    const seconds = Math.floor((left % (1000 * 60)) / 1000);\r\n    let status = 1;\r\n    // var p = ((minutes + seconds / 100) / 60) * 100;\r\n    // Output the result in an element with id=\"timer\"\r\n    const displayTime = hours + \"h\" + minutes + \"m\" + seconds + \"s\";\r\n    // If the count down is over, print expired\r\n    if (left < 0) {\r\n      status = 0;\r\n    }\r\n    return { displayTime, status };\r\n  }\r\n\r\n  y = setInterval(() => {\r\n    this.refreshData(this.state.timers);\r\n  }, 1000);\r\n\r\n  refreshData(data) {\r\n    for (let i = 0; i < data.length; i++) {\r\n      data[i] = {\r\n        ...data[i],\r\n        ...this.getDisplayTime(data[i].startTime, data[i].time),\r\n      };\r\n    }\r\n    this.setState({ timers: data });\r\n  }\r\n\r\n  addTimer = ({ name, time }) => {\r\n    const startTime = new Date().getTime();\r\n    let d = new Date().getTime();\r\n    console.log(startTime);\r\n    console.log(d);\r\n    const status = 1;\r\n    // this.getDisplayTime()\r\n\r\n    //   startTime.setHours(startTime.getHours() + time);\r\n\r\n    //FOR 3 HRS\r\n\r\n    const timer = { name, time, startTime, status };\r\n    this.addData(timer);\r\n    this.setState({\r\n      timers: [...this.state.timers, timer],\r\n    });\r\n    // console.log(this.state.timers);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>BOSS TIMERS</h1>\r\n        <AddTimer addTimer={this.addTimer} />\r\n        <Timers timers={this.state.timers} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nclass AddTimer extends Component {\r\n  timer = {};\r\n\r\n  handleChange = (event) => {\r\n    const target = event.target;\r\n    if (target.name === \"name\") {\r\n      this.timer.name = target.value;\r\n    } else if (target.name === \"time\") {\r\n      this.timer.time = target.value;\r\n    }\r\n  };\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    this.props.addTimer(this.timer);\r\n  };\r\n  render() {\r\n    return (\r\n      <form>\r\n        <label>\r\n          Name:\r\n          <input type=\"text\" name=\"name\" onChange={this.handleChange} />\r\n        </label>\r\n        <label>\r\n          time:\r\n          <input type=\"text\" name=\"time\" onChange={this.handleChange} />\r\n        </label>\r\n        <input type=\"submit\" value=\"Submit\" onClick={this.handleSubmit} />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nclass Timers extends Component {\r\n  timer = {};\r\n\r\n  handleChange = (event) => {\r\n    const target = event.target;\r\n    if (target.name === \"name\") {\r\n      this.timer.name = target.value;\r\n    } else if (target.name === \"time\") {\r\n      this.timer.time = target.value;\r\n    }\r\n  };\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    this.props.addTimer(this.timer);\r\n  };\r\n\r\n  render() {\r\n    const Timer = (props) => (\r\n      <div>\r\n        {props.timer.name}--- {props.timer.displayTime}\r\n      </div>\r\n    );\r\n    return (\r\n      <div>\r\n        {this.props.timers.map((timer, key) => (\r\n          <Timer key={key} timer={timer} />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MyBody;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport MyBody from \"./components/mybody\";\r\n\r\nfunction App() {\r\n  return <div className=\"App\">{/* <MyBody /> */}sjkdsjn</div>;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}