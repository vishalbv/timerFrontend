{"version":3,"sources":["constants.js","service/api-service.js","components/mybody.js","App.js","serviceWorker.js","index.js"],"names":["config","API_URL","ApiService","Address","getData","callback","fetch","then","res","json","result","addTimer","options","updateTimer","MyBody","props","timer","_id","undefined","name","time","startTime","status","displayTime","method","headers","body","JSON","stringify","apiService","setState","timers","state","resetTimer","data","i","length","timerStatusChange","val","st","Date","getTime","filter","v","k","value","this","console","log","setInterval","refreshData","interval","offSet","isNaN","parseInt","setHours","getHours","left","hours","Math","floor","minutes","seconds","getDisplayTime","Component","AddTimer","handleChange","event","target","handleSubmit","preventDefault","type","onChange","onClick","Timers","Timer","className","handleEvent","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ce5846d2.chunk.js","sourcesContent":["const prod = {\r\n  API_URL: `https://attractiontimers-be.herokuapp.com`,\r\n};\r\n\r\nconst dev = {\r\n  API_URL: `http://localhost:3001`,\r\n};\r\nexport const config = process.env.NODE_ENV === `development` ? dev : prod;\r\n","import { config } from \"../constants\";\r\n\r\nclass ApiService {\r\n  Address = config.API_URL;\r\n\r\n  getData = (callback) => {\r\n    fetch(this.Address + \"/getData\")\r\n      .then((res) => res.json())\r\n      .then((result) => {\r\n        callback(result);\r\n      });\r\n  };\r\n\r\n  addTimer = (options, callback) => {\r\n    fetch(this.Address + \"/addTimer\", options)\r\n      .then((res) => res.json())\r\n      .then((result) => {\r\n        callback(result);\r\n      });\r\n  };\r\n\r\n  updateTimer = (options, callback) => {\r\n    fetch(this.Address + \"/updateTimer\", options)\r\n      .then((res) => res.json())\r\n      .then((result) => {\r\n        callback(result);\r\n      });\r\n  };\r\n}\r\n\r\nexport default ApiService;\r\n","import React, { Component } from \"react\";\r\nimport \"./mybody.css\";\r\n\r\nimport ApiService from \"../service/api-service\";\r\n\r\nclass MyBody extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.apiService = new ApiService();\r\n    this.state = { value: \"\", timers: [] };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.apiService.getData((result) => {\r\n      this.setState({ timers: result });\r\n      console.log(this.state);\r\n    });\r\n\r\n    setInterval(() => {\r\n      this.refreshData(this.state.timers);\r\n    }, 1000);\r\n  }\r\n  getDisplayTime(st, interval) {\r\n    let startTime = new Date(st);\r\n    const offSet = isNaN(parseInt(interval)) ? 0 : parseInt(interval);\r\n    startTime.setHours(startTime.getHours() + offSet);\r\n    const endTime = startTime.getTime();\r\n    // Update the count down every 1 second\r\n\r\n    // Get today's date and time\r\n    const now = new Date().getTime();\r\n\r\n    const left = endTime - now;\r\n    // Time calculations for hours, minutes and seconds\r\n    const hours = Math.floor((left % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\r\n    const minutes = Math.floor((left % (1000 * 60 * 60)) / (1000 * 60));\r\n    const seconds = Math.floor((left % (1000 * 60)) / 1000);\r\n    let status = \"S\";\r\n    // var p = ((minutes + seconds / 100) / 60) * 100;\r\n    // Output the result in an element with id=\"timer\"\r\n    const displayTime =\r\n      hours < 0 ? \"EXPIRED\" : hours + \"h\" + minutes + \"m\" + seconds + \"s\";\r\n    // If the count down is over, print expired\r\n    if (left < 0) {\r\n      status = \"E\";\r\n    }\r\n    // isNaN(parseInt(interval)) ? 0 : parseInt(interval)\r\n\r\n    return { displayTime, status };\r\n  }\r\n\r\n  refreshData(data) {\r\n    for (let i = 0; i < data.length; i++) {\r\n      if (data[i].status === \"S\") {\r\n        data[i] = {\r\n          ...data[i],\r\n          ...this.getDisplayTime(data[i].startTime, data[i].time),\r\n        };\r\n        if (data[i].status === \"E\") {\r\n          this.timerStatusChange({ val: data[i], st: data[i].status });\r\n        }\r\n      }\r\n    }\r\n    this.setState({ timers: data });\r\n  }\r\n\r\n  addTimer = ({ name, time }) => {\r\n    // this.getDisplayTime()\r\n\r\n    //   startTime.setHours(startTime.getHours() + time);\r\n\r\n    //FOR 3 HRS\r\n\r\n    const timer = {\r\n      _id: undefined,\r\n      name,\r\n      time,\r\n      startTime: 0,\r\n      status: \"A\",\r\n      displayTime: undefined,\r\n    };\r\n    const options = {\r\n      method: \"POST\",\r\n      // or 'PUT'\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(timer),\r\n    };\r\n\r\n    this.apiService.addTimer(options, (result) => {\r\n      this.setState({\r\n        timers: [\r\n          ...this.state.timers,\r\n          { ...timer, _id: result._id, displayTime: \"Newly Added\" },\r\n        ],\r\n      });\r\n    });\r\n\r\n    //this.addData(timer);\r\n\r\n    // console.log(this.state.timers);\r\n  };\r\n  resetTimer = (timer) => {\r\n    // const ref = this.state.timers.filter((val, key) => val.name === timer.name);\r\n    let data = this.state.timers;\r\n    for (let i = 0; i < data.length; i++) {\r\n      if (data[i].name === timer.name) {\r\n        data[i].status = 0;\r\n        data[i].displayTime = 0;\r\n      }\r\n    }\r\n    this.setState({ timers: data });\r\n  };\r\n\r\n  timerStatusChange = ({ val, st }) => {\r\n    let startTime = undefined;\r\n    let status = undefined;\r\n    let displayTime = undefined;\r\n    if (st === \"S\") {\r\n      startTime = new Date().getTime();\r\n      status = \"S\";\r\n      displayTime = val.displayTime;\r\n    } else if (st === \"R\") {\r\n      startTime = 0;\r\n      status = \"R\";\r\n      displayTime = 0;\r\n    } else if (st === \"D\") {\r\n      startTime = val.startTime;\r\n      status = \"D\";\r\n    } else if (st === \"E\") {\r\n      startTime = val.startTime;\r\n      status = \"E\";\r\n      displayTime = \"EXPIRED\";\r\n    }\r\n\r\n    const timer = { ...val, startTime, status, displayTime };\r\n    const options = {\r\n      method: \"POST\",\r\n      // or 'PUT'\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(timer),\r\n    };\r\n\r\n    this.apiService.updateTimer(options, (result) => {\r\n      if (st === \"D\") {\r\n        let data = this.state.timers.filter((v, k) => v._id !== val._id);\r\n        this.setState({ timers: data });\r\n      } else {\r\n        let data = this.state.timers;\r\n        for (let i = 0; i < data.length; i++) {\r\n          if (data[i]._id === val._id) {\r\n            data[i] = { ...data[i], startTime, status, displayTime };\r\n          }\r\n        }\r\n        this.setState({ timers: data });\r\n      }\r\n    });\r\n\r\n    // startrd\r\n    // deleted\r\n    // expired\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>BOSS TIMERS</h1>\r\n        <AddTimer addTimer={this.addTimer} />\r\n        <Timers\r\n          timers={this.state.timers}\r\n          timerStatusChange={this.timerStatusChange}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nclass AddTimer extends Component {\r\n  timer = {};\r\n\r\n  handleChange = (event) => {\r\n    const target = event.target;\r\n    if (target.name === \"name\") {\r\n      this.timer.name = target.value;\r\n    } else if (target.name === \"time\") {\r\n      this.timer.time = target.value;\r\n    }\r\n  };\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    this.props.addTimer(this.timer);\r\n  };\r\n  render() {\r\n    return (\r\n      <form>\r\n        <label>\r\n          Name:\r\n          <input type=\"text\" name=\"name\" onChange={this.handleChange} />\r\n        </label>\r\n        <label>\r\n          time:\r\n          <input type=\"text\" name=\"time\" onChange={this.handleChange} />\r\n        </label>\r\n        <input type=\"submit\" value=\"Submit\" onClick={this.handleSubmit} />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nclass Timers extends Component {\r\n  timer = {};\r\n\r\n  handleEvent(val, st) {\r\n    this.props.timerStatusChange({ val, st });\r\n  }\r\n\r\n  render() {\r\n    const Timer = (props) => (\r\n      <span className=\"timerBlock\">\r\n        <h1>{props.timer.name}</h1>\r\n        <h2>{props.timer.displayTime}</h2>\r\n        <button onClick={() => this.handleEvent(props.timer, \"R\")}>\r\n          Reset\r\n        </button>\r\n        <button onClick={() => this.handleEvent(props.timer, \"S\")}>\r\n          start\r\n        </button>\r\n        <button onClick={() => this.handleEvent(props.timer, \"D\")}>\r\n          Delete\r\n        </button>\r\n      </span>\r\n    );\r\n    return (\r\n      <div className=\"timers\">\r\n        {this.props.timers.map((timer, key) => (\r\n          <Timer key={key} timer={timer} />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MyBody;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport MyBody from \"./components/mybody\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <MyBody />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}